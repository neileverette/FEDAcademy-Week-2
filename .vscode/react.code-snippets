{
  // {
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript,javascriptreact,typescriptreact",
  //  "prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "copyright": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "copyright",
    "body": [
      "/**",
      " * Copyright IBM Corp. $CURRENT_YEAR, $CURRENT_YEAR",
      " *",
      " * This source code is licensed under the Apache-2.0 license found in the",
      " * LICENSE file in the root directory of this source tree.",
      " */"
    ]
  },
  "index-file": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "index-file",
    "body": [
      "export { ${TM_DIRECTORY/.*[\\/]//gm} } from './${TM_DIRECTORY/.*[\\/]//gm}';",
      ""
    ],
    "description": "Index file named"
  },
  "index-file-full": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "index-file-full",
    "body": [
      "import ${TM_DIRECTORY/.*[\\/]//gm} from './${TM_DIRECTORY/.*[\\/]//gm}';",
      "export { ",
      "\t${TM_DIRECTORY/.*[\\/]//gm},",
      "};",
      "export default ${TM_DIRECTORY/.*[\\/]//gm}",
      ""
    ],
    "description": "Index file"
  },
  "index-file-default": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "index-file-default",
    "body": ["export { default } from './${TM_DIRECTORY/.*[\\/]//gm}';", ""],
    "description": "Index file"
  },
  "eslint-debugger": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "deb",
    "body": ["// eslint-disable-next-line", "debugger;", ""]
  },
  "eslint-conlog": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "con",
    "body": ["// eslint-disable-next-line", "console.log($1);", ""]
  },
  "eslint-condir": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cond",
    "body": ["// eslint-disable-next-line", "console.dir($1);", ""]
  },
  "test-prop": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "//test-prop",
    "body": ["// ***************", "// PROP CHECKS", "// ***************"]
  },
  "test-snapshots": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "//test-snap",
    "body": ["// ***************", "// SNAPSHOT CHECKS", "// ***************"]
  },
  "test-functional": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "//test-func",
    "body": ["// ***************", "// FUNCTIONAL CHECKS", "// ***************"]
  },
  "React_Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "template-react",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import classNames from 'classnames';",
      "",
      "import './${TM_FILENAME_BASE/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}.scss';",
      "",
      "const blockClass = `${TM_FILENAME_BASE/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}`",
      "",
      "export const ${TM_FILENAME_BASE} = ({ className }) => {",
      "\treturn (",
      "\t\t<div className={classNames(className, blockClass)} >",
      "\t\t\t${TM_FILENAME_BASE}",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "${TM_FILENAME_BASE}.propTypes = {",
      "\tclassName: PropTypes.string,",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}"
    ],
    "description": "React component"
  },
  "React_Component--CSS_Module": {
    "React_Component": {
      "scope": "javascript,typescript,javascriptreact,typescriptreact",
      "prefix": "template-react-css-module",
      "body": [
        "import React from 'react';",
        "import PropTypes from 'prop-types';",
        "import classNames from 'classnames';",
        "",
        "import styles from './${TM_FILENAME_BASE}.module.scss';",
        "",
        "export const ${TM_FILENAME_BASE} = ({ className }) => {",
        "\treturn (",
        "\t\t<div className={classNames(className, styles.${TM_FILENAME_BASE})} ",
        ">",
        "\t\t\t${TM_FILENAME_BASE}",
        "\t\t</div>",
        "\t);",
        "};",
        "",
        "${TM_FILENAME_BASE}.propTypes = {",
        "\tclassName: PropTypes.string,",
        "};",
        "",
        "export default ${TM_FILENAME_BASE}"
      ],
      "description": "React component css modules"
    }
  },
  "istanbul next": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istann",
    "body": ["/* istanbul ignore next */"]
  },
  "istanbul if": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istani",
    "body": ["/* istanbul ignore if */"]
  },
  "istanbul esle": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istani",
    "body": ["/* istanbul ignore else */"]
  }
}
